{"title":"生产环境部署：python+django+nginx+uwsgi+debug=False+关闭django自带的admin后台","date":"2020-10-18T21:32:52.000Z","date_formatted":{"ll":"2020年10月18日","L":"2020/10/18","MM-DD":"10-18"},"link":"2020/10/18/生产环境部署：python-django-nginx-uwsgi-debug-False-关闭django自带的admin后台","tags":["django","nginx","python","uwsgi"],"categories":["技术"],"updated":"2022-11-19T15:43:12.598Z","content":"<blockquote>\n<p>**参考：**<a href=\"https://www.cnblogs.com/zhming26/p/6158660.html\" target=\"_blank\">https://www.cnblogs.com/zhming26/p/6158660.html</a></p>\n<p><strong>前言：</strong></p>\n<p> 该种部署方式中nginx接收Web的所有请求，其中所有的静态请求由nginx来处理，所有的非静态请求通过uwsgi传递给Django，由Django来进行处理，从而完成一次WEB请求。</p>\n</blockquote>\n<h5 id=\"1.-测试部署环境\">1. 测试部署环境<a title=\"#1.-测试部署环境\" href=\"#1.-测试部署环境\"></a></h5>\n<ul>\n<li>操作系统debian 10</li>\n<li>python3.7</li>\n<li>django2.2</li>\n</ul>\n<h5 id=\"2.-安装nginx及配置\">2. 安装nginx及配置<a title=\"#2.-安装nginx及配置\" href=\"#2.-安装nginx及配置\"></a></h5>\n<h6 id=\"2.1-切换到root权限，安装\">2.1 切换到root权限，安装<a title=\"#2.1-切换到root权限，安装\" href=\"#2.1-切换到root权限，安装\"></a></h6>\n<p><code>apt-get install nginx</code></p>\n<h6 id=\"2.2-添加对应网站的配置文件和测试内容\">2.2 添加对应网站的配置文件和测试内容<a title=\"#2.2-添加对应网站的配置文件和测试内容\" href=\"#2.2-添加对应网站的配置文件和测试内容\"></a></h6>\n<p><code>vim /etc/nginx/conf.d/wj.conf</code></p>\n<pre><code class=\"language-conf\">server &#123;\n    listen       8088;    # 修改端口号\n    server_name  localhost;\n\n\n    #charset koi8-r;\n\n\n    #access_log  logs/host.access.log  main;\n\n\n    location / &#123;\n        root   html;\n        index  index.html index.htm;\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"2.3-重启nginx服务\">2.3 重启nginx服务<a title=\"#2.3-重启nginx服务\" href=\"#2.3-重启nginx服务\"></a></h6>\n<p><code>service nginx restart</code></p>\n<h6 id=\"2.4-本地测试运行：http://localhost:8088/\">2.4 本地测试运行：<a href=\"http://localhost:8088/\">http://localhost:8088/</a><a title=\"#2.4-本地测试运行：http://localhost:8088/\" href=\"#2.4-本地测试运行：http://localhost:8088/\"></a></h6>\n<img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/20201018214308.png\" style=\"zoom:80%;\" />\n<h5 id=\"3.-python3.7安装uwsgi\">3. python3.7安装uwsgi<a title=\"#3.-python3.7安装uwsgi\" href=\"#3.-python3.7安装uwsgi\"></a></h5>\n<h6 id=\"3.1-解决报错\">3.1 解决报错<a title=\"#3.1-解决报错\" href=\"#3.1-解决报错\"></a></h6>\n<pre><code class=\"language-shell\">sudo apt install python3.7-dev\n\npip3 install uwsgi --upgrade\n</code></pre>\n<h6 id=\"3.2-测试uwsgi，创建test.py文件\">3.2 测试uwsgi，创建test.py文件<a title=\"#3.2-测试uwsgi，创建test.py文件\" href=\"#3.2-测试uwsgi，创建test.py文件\"></a></h6>\n<pre><code class=\"language-python\">def application(env, start_response):\n    start_response('200 OK', [('Content-Type','text/html')])\n    return [b&quot;Hello World&quot;]\n</code></pre>\n<h6 id=\"3.3-通过uwsgi测试运行该文件\">3.3 通过uwsgi测试运行该文件<a title=\"#3.3-通过uwsgi测试运行该文件\" href=\"#3.3-通过uwsgi测试运行该文件\"></a></h6>\n<p><code>uwsgi --http :8001 --wsgi-file ./test.py</code></p>\n<img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/20201018214529.png\" style=\"zoom:80%;\" />\n<h6 id=\"tips:（以下内容仅作参考不做配置也可以，关闭服务时ctrl+c即可）\">TIPS:（以下内容仅作参考不做配置也可以，关闭服务时ctrl+c即可）<a title=\"#tips:（以下内容仅作参考不做配置也可以，关闭服务时ctrl+c即可）\" href=\"#tips:（以下内容仅作参考不做配置也可以，关闭服务时ctrl+c即可）\"></a></h6>\n<ul>\n<li>可在项目根目录下新建两个文件wj_uwsgi.pid和wj_uwsgi.status，一个记录pid号方便重启和停止服务，一个记录服务运行状态。</li>\n<li>修改你的uwsgi配置文件，wj_uwsgi.ini文件添加以下配置：</li>\n</ul>\n<pre><code class=\"language-ini\">stats=%(chdir)/wj_uwsgi.status           \npidfile=%(chdir)/wj_uwsgi.pid\n</code></pre>\n<ul>\n<li>以后通过uwsgi启动wj_uwsgi.ini文件，就会在.pid和.status文件内记录内容，启动、重启、停止uwsgi：</li>\n</ul>\n<pre><code class=\"language-shell\"># 启动：\nuwsgi --ini xxx.ini\n# 重启：\nuwsgi --reload xxx.pid\n# 停止：\nuwsgi --stop xxx.pid\n</code></pre>\n<h5 id=\"4.-配置django与uwsgi连接\">4. 配置Django与uwsgi连接<a title=\"#4.-配置django与uwsgi连接\" href=\"#4.-配置django与uwsgi连接\"></a></h5>\n<p> django项目位置为：/home/mycode/webshellCheck</p>\n<h6 id=\"4.1-在项目根目录webshellcheck下新建wj_uwsgi.ini文件\">4.1 在项目根目录webshellCheck下新建wj_uwsgi.ini文件<a title=\"#4.1-在项目根目录webshellcheck下新建wj_uwsgi.ini文件\" href=\"#4.1-在项目根目录webshellcheck下新建wj_uwsgi.ini文件\"></a></h6>\n<pre><code class=\"language-ini\"># wj_uwsgi file\n[uwsgi]\n\n# Django-related settings\nsocket = 127.0.0.1:9000\n\n# the base directory (full path)\nchdir = /home/mycode/webshellCheck\n\n# Django s wsgi file\nmodule = webshellCheck.wsgi\n\n# process-related settings\n# master\nmaster = true\n\n# maximum number of worker processes\nprocesses = 4\n\n# ... with appropriate permissions - may be needed\n# chmod-socket    = 664\n# clear environment on exit\nvacuum = true\n</code></pre>\n<p><strong>注：</strong></p>\n<ul>\n<li>socket 指定项目执行的端口号。</li>\n<li>chdir 指定项目的目录。</li>\n<li>module webshellCheck.wsgi ，可以这么来理解，对于wj_uwsgi.ini文件来说，与它的平级的有一个webshellCheck目录，这个目录下有一个wsgi.py文件。</li>\n</ul>\n<h6 id=\"4.2-在项目目录下通过uwsgi命令读取wj_uwsgi.ini文件启动项目\">4.2 在项目目录下通过uwsgi命令读取wj_uwsgi.ini文件启动项目<a title=\"#4.2-在项目目录下通过uwsgi命令读取wj_uwsgi.ini文件启动项目\" href=\"#4.2-在项目目录下通过uwsgi命令读取wj_uwsgi.ini文件启动项目\"></a></h6>\n<p><code>uwsgi --ini ./wj_uwsgi.ini</code></p>\n<h6 id=\"4.3-修改nginx.conf配置文件\">4.3 修改nginx.conf配置文件<a title=\"#4.3-修改nginx.conf配置文件\" href=\"#4.3-修改nginx.conf配置文件\"></a></h6>\n<pre><code class=\"language-conf\">server &#123;\n    listen         8099;\n    server_name    127.0.0.1\n    charset UTF-8;\n    access_log      /var/log/nginx/wj_access.log;\n    error_log       /var/log/nginx/wj_error.log;\n\n\n    client_max_body_size 75M;\n\n\n    location / &#123;\n        include uwsgi_params;\n        uwsgi_pass 127.0.0.1:9000;\n        uwsgi_read_timeout 2;\n    &#125;   \n    location /static &#123;\n        expires 30d;\n        autoindex on;\n        add_header Cache-Control private;\n        alias /home/mycode/webshellCheck/frontend/dist/static;\n     &#125;\n&#125;\n</code></pre>\n<h6 id=\"4.4-重启nginx，然后启动uwsgi\">4.4 重启nginx，然后启动uwsgi<a title=\"#4.4-重启nginx，然后启动uwsgi\" href=\"#4.4-重启nginx，然后启动uwsgi\"></a></h6>\n<pre><code class=\"language-shell\">service nginx restart\n\nuwsgi --ini ./wj_uwsgi.ini\n</code></pre>\n<h6 id=\"4.5-在浏览器测试访问：localhost:8099\">4.5 在浏览器测试访问：localhost:8099<a title=\"#4.5-在浏览器测试访问：localhost:8099\" href=\"#4.5-在浏览器测试访问：localhost:8099\"></a></h6>\n<img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/20201018215145.png\" style=\"zoom:80%;\" />\n<p> uwsgi启动成功日志：</p>\n<img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/20201018215253.png\" style=\"zoom:80%;\" />\n<h5 id=\"5.-生产环境配置：django-debug=false+关闭django自带的admin后台\">5. 生产环境配置：Django debug=False+关闭django自带的admin后台<a title=\"#5.-生产环境配置：django-debug=false+关闭django自带的admin后台\" href=\"#5.-生产环境配置：django-debug=false+关闭django自带的admin后台\"></a></h5>\n<h6 id=\"5.1-静态文件配置\">5.1 静态文件配置<a title=\"#5.1-静态文件配置\" href=\"#5.1-静态文件配置\"></a></h6>\n<p> 关于本项目中前端打包的静态文件放在项目根目录下的frontend/dist/static路径下，部署到生产环境中需要将debug设置为false，静态文件相关配置如下:</p>\n<pre><code class=\"language-conf\">......\nDEBUG = False\t# 修改\n\nALLOWED_HOSTS = ['*', ]\t# 允许所有域名访问\n\nSTATIC_URL = '/static/'\t# 静态路由映射，别名设置，django利用STATIC_URL来让浏览器可以直接访问静态文件\n\nSTATICFILES_DIRS = [\t# 公共文件夹的静态文件路由配置\n    os.path.join(BASE_DIR, &quot;frontend/dist/static&quot;),\n]\n\nTEMPLATES = [\n    &#123;\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # 'DIRS': [],\n        'DIRS': ['frontend/dist/static'],\t# 模板文件的路径设置\n        'APP_DIRS': True,\n        'OPTIONS': &#123;\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        &#125;,\n    &#125;,\n]\n......\n</code></pre>\n<h6 id=\"5.2-关闭django自带的admin后台，主urls.py的配置\">5.2 关闭django自带的admin后台，主urls.py的配置<a title=\"#5.2-关闭django自带的admin后台，主urls.py的配置\" href=\"#5.2-关闭django自带的admin后台，主urls.py的配置\"></a></h6>\n<pre><code class=\"language-python\">from django.contrib import admin\nfrom django.urls import path, include\nfrom django.views.generic import TemplateView\n\n\nurlpatterns = [\n    # path('admin/', admin.site.urls),    # 生产环境下建议可关闭django自带的后台管理\n    path('', TemplateView.as_view(template_name=&quot;index.html&quot;)),    # 首页模板调用路径\n    path('users/', include('wscheck.urls'))\n]\n</code></pre>\n<p> Django关闭DEBUG模式后，就相当于是生产环境了，Django官网上指出如果是django框架一旦作为生产环境，那么它的静态文件访问接口就不应该从Django框架中走了，应该有独立的web环境，首推nginx 。在开发过程中，开发人员在框架的根目录下创建一个static目录，目录在根据里面有几个APP创建对应APP程序静态文件目录。但是一旦放到生产环境（也就是关闭掉DEBUG模式），你在nginx中就要单独做访问/static/目录的路由。</p>\n<h6 id=\"5.3-存在多个应用内的静态文件时的配置\">5.3 存在多个应用内的静态文件时的配置<a title=\"#5.3-存在多个应用内的静态文件时的配置\" href=\"#5.3-存在多个应用内的静态文件时的配置\"></a></h6>\n<p> 这里由于只有一个应用的静态文件需要加载，所以注意nginx的配置中项目运行需要加载的静态文件就是一个绝对路径，上面关于静态文件的配置完全可以满足本项目的需求。而当该项目下不止一个app且每个app下都有独立的静态文件的时候，我们就需要将所有的静态文件都统一放到一个目录下。django提供了一个比较方便的方法：</p>\n<p>（1）在上述例子的静态文件配置的基础上，settings.py中配置一个静态目录的根目录：STATIC_ROOT</p>\n<pre><code class=\"language-python\">STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')    # 注意staticfiles可以是其他名称，但是不要和STATICFILES_DIRS设置的名称重复\n</code></pre>\n<p>（2）然后在项目根目录下执行以下命令，可将项目下所有的静态资源统一复制到STATIC_ROOT目录下</p>\n<pre><code class=\"language-shell\">root@debian:/home/mycode/webshellCheck# python3 manage.py collectstatic\n</code></pre>\n<p> 执行完命令可以看到在项目根目录下多了一个带锁图标的staticfiles文件夹，记得赋予该目录权限：</p>\n<p><code>chmod 777 staticfiles -R</code></p>\n<img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/20201018222754.png\" style=\"zoom:60%;\" />\n<p>（3）修改nginx配置中的静态文件路径，将该行<code>alias /home/mycode/webshellCheck/frontend/dist/static;</code>更改为：</p>\n<p><code>alias /home/mycode/webshellCheck/staticfiles;</code></p>\n<p> 重启nginx，启动uwsgi，在浏览器测试运行成功！</p>\n<p> 尝试在浏览器输入<code>localhost:8090/不存在的路径</code>不会出现暴露部分路径的debug信息，尝试输入<code>localhost:8090/admin</code>提示不存在。:v::satisfied::v:</p>\n","prev":{"title":"被催更的寒假作业--长沙小复盘","link":"2021/02/20/被催更的寒假作业-长沙小复盘"},"next":{"title":"解决打包前端文件到django后端项目中静态文件无法加载出现404的问题","link":"2020/10/11/解决打包前端文件到django后端项目中静态文件无法加载出现404的问题"},"plink":"https://nanzet.cn/2020/10/18/生产环境部署：python-django-nginx-uwsgi-debug-False-关闭django自带的admin后台/","reward":true,"copyright":{"author":"nanzet","link":"<a href=\"https://nanzet.cn/2020/10/18/生产环境部署：python-django-nginx-uwsgi-debug-False-关闭django自带的admin后台/\" title=\"生产环境部署：python+django+nginx+uwsgi+debug=False+关闭django自带的admin后台\">https://nanzet.cn/2020/10/18/生产环境部署：python-django-nginx-uwsgi-debug-False-关闭django自带的admin后台/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1551 字约 10 分钟"}