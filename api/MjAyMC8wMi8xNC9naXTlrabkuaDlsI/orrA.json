{"title":"git学习小记","date":"2020-02-14T17:03:37.000Z","date_formatted":{"ll":"2020年2月14日","L":"2020/02/14","MM-DD":"02-14"},"link":"2020/02/14/git学习小记","tags":["git"],"categories":["技术"],"updated":"2022-11-19T15:43:12.598Z","content":"<p>1、初始化一个Git仓库，使用<strong>git init</strong>命令。可以将某个新建的目录变成Git可以管理的仓库。</p>\n<p>2、提交修改和提交新文件到Git仓库，一样分两步：</p>\n<ul>\n<li>使用命令<strong>git add <file></strong> ，注意，可反复多次使用，添加多个文件；</li>\n<li>使用命令<strong>git commit -m “说明注释”</strong> ，完成。</li>\n</ul>\n<p>3、<strong>git status</strong>可查看工作区状态，<strong>git diff</strong>可查看版本修改内容。</p>\n<p>4、<strong>git add</strong>的各种区别：</p>\n<pre><code>git add -A   // 添加所有改动\ngit add *     // 添加新建文件和修改，但是不包括删除\ngit add .    // 添加新建文件和修改，但是不包括删除\ngit add -u   // 添加修改和删除，但是不包括新建文件\n</code></pre>\n<p><strong>git add . 和 git add * 区别：</strong><br>\n git add . 会把本地所有untrack的文件都加入暂存区，并且会根据.gitignore做过滤，但是git add * 会忽略.gitignore把任何文件都加入。</p>\n<p>5、在 commit 前撤销 add:</p>\n<pre><code>git reset &lt;file&gt; // 撤销提交单独文件\ngit reset        // unstage all due changes\n</code></pre>\n<p>6、版本回退：</p>\n<ul>\n<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。</li>\n<li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</li>\n</ul>\n<p>7、理解： 需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。<br>\n<img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/git.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>8、git管理的是修改而不是文件：每次修改，如果不用git add到暂存区，那就不会加入到commit中。</p>\n<p>9、撤销修改：<br>\n<strong>场景1：</strong><br>\n 改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>\n<p><strong>场景2：</strong><br>\n 不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</p>\n<p><strong>场景3：</strong><br>\n 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。</p>\n<p>10、删除文件流程：</p>\n<ul>\n<li>\n<p>在本地仓库删除指定文件：<br>\n<code>git rm &lt;filename&gt;</code></p>\n</li>\n<li>\n<p>删除本地仓库文件夹：（先进入该文件夹所在目录在执行命令）<br>\n<code>git rm -r 文件夹/</code></p>\n</li>\n<li>\n<p>提交修改<br>\n<code>git commit -m &quot;删除文件夹&quot;</code></p>\n</li>\n<li>\n<p>推送到远程仓库<br>\n<code>git push    # origin master</code></p>\n</li>\n</ul>\n<p><strong>注：git rm命令</strong></p>\n<pre><code>git rm -h\n用法：git rm [&lt;选项&gt;] [--] &lt;文件&gt;...\n    -n, --dry-run         演习\n    -q, --quiet           不列出删除的文件\n    --cached              只从索引区删除\n    -f, --force           忽略文件更新状态检查\n    -r                    允许递归删除\n    --ignore-unmatch      即使没有匹配，也以零状态退出\n</code></pre>\n<p>11、从远程库克隆：<br>\n 例如已经在gitea创建了名为PE-TOOL的仓库并勾选了Initialize this repository with a README。<br>\n 使用git clone克隆一个本地库：<br>\n<code>git clone http://xxxx/Nanzet/PE-TOOL.git</code></p>\n","prev":{"title":"下雪啦","link":"2020/02/15/下雪啦"},"next":{"title":"了解国内相关法规，爬虫到底能爬哪些内容？","link":"2020/02/13/了解国内相关法规，爬虫到底能爬哪些内容？"},"plink":"https://nanzet.cn/2020/02/14/git学习小记/","reward":true,"copyright":{"author":"nanzet","link":"<a href=\"https://nanzet.cn/2020/02/14/git学习小记/\" title=\"git学习小记\">https://nanzet.cn/2020/02/14/git学习小记/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"779 字约 5 分钟"}