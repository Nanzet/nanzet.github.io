{"title":"Django--使用snowflake自定义生成主键ID替换数据库主键自增ID","date":"2020-07-14T10:00:00.000Z","date_formatted":{"ll":"2020年7月14日","L":"2020/07/14","MM-DD":"07-14"},"author":"Nanzet","link":"2020/07/14/简单—Django修改自增主键id为使用snowflake自定义生成主键id","tags":["Django"],"categories":["技术"],"updated":"2022-11-19T15:43:12.598Z","content":"<h4 id=\"1、场景\">1、场景<a title=\"#1、场景\" href=\"#1、场景\"></a></h4>\n<h5 id=\"1.1-安装环境\">1.1 安装环境<a title=\"#1.1-安装环境\" href=\"#1.1-安装环境\"></a></h5>\n<p>python–v 3.7.1</p>\n<p>Django–v 2.2</p>\n<h5 id=\"1.2-应用场景\">1.2 应用场景<a title=\"#1.2-应用场景\" href=\"#1.2-应用场景\"></a></h5>\n<p> 原来使用的所有数据库表模型里的主键都是自定义或数据库自动生成的自增ID，它存在以下两大缺点无法满足后续的需求，使用雪花算法自定义生成主键ID可以避免这种问题。</p>\n<p><strong>数据库主键自增id的缺点：</strong></p>\n<p> a. 极度依赖数据库，分表分库或者数据库做主从结构时无法保证唯一性，ID在生成时会出现性能瓶颈。</p>\n<p> b. 不安全，客户端可以根据自增ID很轻易猜出我们的业务数据</p>\n<h4 id=\"2、了解雪花算法snowflake\">2、了解雪花算法snowflake<a title=\"#2、了解雪花算法snowflake\" href=\"#2、了解雪花算法snowflake\"></a></h4>\n<p><strong>原理：</strong></p>\n<p> 参考：<a href=\"https://www.cnblogs.com/oklizz/p/11865750.html\" target=\"_blank\">https://www.cnblogs.com/oklizz/p/11865750.html</a></p>\n<p><strong>优点：</strong></p>\n<p> 不依赖第三方系统，ID全局唯一，数据具有递增的连续性，便于查询。</p>\n<p><strong>缺点：</strong></p>\n<p>  依赖系统时钟，如果系统时钟有问题，会导致ID重复（该问题可以通过很多方式避免）</p>\n<h4 id=\"3、过程\">3、过程<a title=\"#3、过程\" href=\"#3、过程\"></a></h4>\n<h5 id=\"3.1-models.py中创建测试原始模型类testrmf，表名'tb_testrmf'\">3.1 models.py中创建测试原始模型类testRMF，表名’tb_testRMF’<a title=\"#3.1-models.py中创建测试原始模型类testrmf，表名'tb_testrmf'\" href=\"#3.1-models.py中创建测试原始模型类testrmf，表名'tb_testrmf'\"></a></h5>\n<p><strong>字段：</strong><br>\n自增主键：test_uid   BigAutoField、</p>\n<p>名称：test_name   CharField</p>\n<p>年龄：test_age   IntegerField</p>\n<p><u><em><a href=\"http://models.py\">models.py</a>:</em></u></p>\n<pre><code class=\"language-python\">class testRMF(models.Model):\n    &quot;&quot;&quot;just for test&quot;&quot;&quot;\n    test_uid =  models.BigAutoField(primary_key=True, verbose_name=&quot;测试数据uid&quot;)  # 主键\n    test_name = models.CharField(max_length=64, verbose_name=&quot;名称&quot;)\n    test_age = models.IntegerField(null=True, verbose_name=&quot;年龄&quot;)\n\n    def __str__(self):\n        return str(self.test_name)\n\n    class Meta:\n        db_table = 'tb_testRMF'\n        verbose_name = verbose_name_plural = '测试数据表'\n</code></pre>\n<h5 id=\"3.2-生成并应用数据库迁移文件，数据表生成\">3.2 生成并应用数据库迁移文件，数据表生成<a title=\"#3.2-生成并应用数据库迁移文件，数据表生成\" href=\"#3.2-生成并应用数据库迁移文件，数据表生成\"></a></h5>\n<pre><code class=\"language-python\">python3 manage.py makemigrations\npython3 manage.py migrate\n</code></pre>\n<p><em><u>tb_testRMF：</u></em></p>\n<p><img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/2020071401.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h5 id=\"3.3-修改为使用snowflake自定义生成主键id\">3.3 修改为使用snowflake自定义生成主键ID<a title=\"#3.3-修改为使用snowflake自定义生成主键id\" href=\"#3.3-修改为使用snowflake自定义生成主键id\"></a></h5>\n<p>首先需要将原来的测试原始模型类testRMF注释掉，运行3.2两行代码移除数据表。</p>\n<p> 在应用目录下（即与models.py同级的目录）新建一个脚本文件snow.py保存雪花算法代码，在models.py中将雪花算法调用方法封装为一个返回id的函数供default参数赋值使用，修改后重新应用并生成数据库迁移文件。</p>\n<p><em><u><a href=\"http://xn--models-2g0js5zek4b5ezb.py\">修改后的models.py</a>:</u></em></p>\n<pre><code class=\"language-python\"># coding=utf-8\nimport django.utils.timezone as timezone\nfrom django.contrib.auth.hashers import check_password, make_password\nfrom django.db import models\n\nfrom .snow import *\n\n\n# Create your models here.\n\ndef test_genID():\n    worker = IdWorker(0, 0)\n    my_id = worker.get_id()\n    return my_id\n\nclass testRMF(models.Model):\n    &quot;&quot;&quot;just for test&quot;&quot;&quot;\n    test_uid = models.BigIntegerField(primary_key=True, default=test_genID, verbose_name=&quot;测试数据uid&quot;)\n    test_name = models.CharField(max_length=64, verbose_name=&quot;名称&quot;)\n    test_age = models.IntegerField(null=True, verbose_name=&quot;年龄&quot;)\n\n    def __str__(self):\n        return self.test_name\n\n    class Meta:\n        db_table = 'tb_testRMF'\n        verbose_name = verbose_name_plural = '测试数据表'\n</code></pre>\n<p> 记得执行3.2两行命令。</p>\n<p><em><u>tb_testRMF：</u></em></p>\n<p><img src=\"https://raw.githubusercontent.com/Nanzet/nanzet-imgs/master/images/2020071402.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"V2Ray+WebSocket+TLS+Nginx","link":"2020/09/14/V2Ray+WebSocket+TLS+Nginx"},"next":{"title":"解决VS Code安装Python扩展后自动下载microsoft python language server缓慢的问题","link":"2020/07/07/解决VS Code安装Python扩展后自动下载microsoft python language server缓慢的问题"},"plink":"https://nanzet.cn/2020/07/14/简单—Django修改自增主键id为使用snowflake自定义生成主键id/","reward":true,"copyright":{"author":"Nanzet","link":"<a href=\"https://nanzet.cn/2020/07/14/简单—Django修改自增主键id为使用snowflake自定义生成主键id/\" title=\"Django--使用snowflake自定义生成主键ID替换数据库主键自增ID\">https://nanzet.cn/2020/07/14/简单—Django修改自增主键id为使用snowflake自定义生成主键id/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"645 字约 4 分钟"}